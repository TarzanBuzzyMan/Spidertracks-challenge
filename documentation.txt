Hey guys!

I got most of this done, I didn't have just enough time to narrow down one last bug unfortunately, the ability to do "A to A" and make it go around instead of 0 distance and single destination of itself.

It works fairly well otherwise, UI doesn't halt because it doesn't wait for other things to finish, as it is called through SwingUtilities.invokeLater(). Pretty straight forward UI over the top of the backend code. Click on the city names on the left hand side to pick start, middle, end destinations. Click calculate for the results to appear on the right hand side. Click reset to clear it all and start again or you can continue to append to the route you were already working on. Select from dropdown on top left to choose the feature to use.

To edit the routes easily, I made the program read the paths and weights in from a text file stored beside the main class file. Just open it with a text editor and save it then reload the program. One thing I would like to do is add an editor to that data in the UI and make it save back so that at runtime you can change the path weightings. Please follow the format of "City One, City Two, 0.0"

One change I made from the start was the data that was read in. I separated it by "," as this would allow city names like Palmerston North to be read in with ease. This allows future proofing and expansion to other areas with ease and without further code modifications needed to accept this. A sample type that would fail under the "AB15" system would be "Palmerston North Upper Hutt 15" as it would be hard to code for two word places without an easy delimiter to look for, this is why I separated each data piece by ",".

Criticism of my code would be the use of dataTypes. They would be the first thing to change if performance were such a great issue with this code. I used doubles instead of floats and other things like HashMaps and ArrayLists over the more basic arrays. These are more costly in terms of memory, but in today's memory standards it isn't as big an issue. The use of double instead of float increases precision but also increases resource usage based on processor. The code itself is fairly hardy and can expand and scale fairly easily.

Benefits of my code would be that it separates the different parts into separate classes. The WeightedGraph class just contains stuff for the WeightedGraph only, UI class for all the UI components etc. This makes the code easier to maintain. If you want to modify the UI, well it is all in one place and you don't have to dig through all the other code to find the place of modification. The code is also broken down into methods. So if you wish to update a particular method because something like say Djikstra is no longer the algorithm of choice, go to the findBestPath method and replace it. This allows for future proofing, you can just chuck a method or two into the WeightedGraph class etc to add a new feature, add it into the UI class and voila. Like I, myself, have done, I wrote Djikstra in, it took a start and end node. I wanted the user to be able to input start, middle and end nodes so I overloaded the same method passing in a List instead and calling the original method as I processed the list.

Another benefit would be the dataTypes. With the use of HashMaps, data can be fetched from them by name. This is shown in the implementation of testPathPossible. It was very easy to add this feature, as I just called for the data by name instead of having to do index lookups of it. The lookup, insert and delete time with a HashMap is usually O(1) which makes it much better performing than basic Arrays. The choice of Djikstra algorithm is also good as it is fast (over Bellman-Ford) and can perform most things required, except for dealing with negative edge weights.

This code may not scale well to being an online application where multiple users can simultaneously use it as I have not checked it for being thread safe among other performance issues. The backend could be better by things like threading Djikstra algorithm to increase performance from it. It would be able to handle multiple users locally but will likely struggle with much larger node/edge sources without changes for better performance.

It needs a bit of polish on the UI side but otherwise it is fairly easy to use all round and I think it would handle most things thrown at it.

To recap:

Pros
UI doesn't wait for other parts so it feels right to the user
Has pretty much all features asked for in brief I think
Code is fairly logical and broken into bite size pieces with minimised code reuse

Cons
Probably uses too much memory for performance issues to arise if this were scaled quite large
Has a bug that if I had more time I would like to find. ("A to A"); Also the UI was programmed to not allow this as input for the moment, but I know the code will just return "A" and 0.0. Sorry


Was quite a fun challenge that was set and I quite enjoyed it!
Thank you once again for the opportunity.

Taran Busby